name: TemplateApp-DEV
services:
  nginx:
    container_name: Nginx-Dev
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend

  frontend:
    container_name: Frontend-Dev
    build:
      context: frontend/
      dockerfile: Dockerfile-dev
    environment:
      VITE_BACKEND_HOST: ${BACKEND_HOST}
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    depends_on:
      - backend

  backend:
    container_name: BackendAPI-Dev
    build: backend/
    command: >
      sh -c "alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
    volumes:
      - ./backend:/app
    depends_on:
      database:
        condition: service_healthy

  worker:
    container_name: BackgroundWorker-Dev
    build: backend/
    command: celery -A celery_worker.main:celery_app worker --loglevel=info
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
    volumes:
      - ./backend:/app
    depends_on:
      - redis

  database:
    container_name: PostgresDB-Dev
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:  # Necessary because depends_on will only validate that the container is running but not the DB instance itself.
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    container_name: Redis-Dev
    image: redis:alpine
    ports:
      - "6379:6379"

  redis-insight:
    container_name: RedisInsightUI-Dev
    image: redis/redisinsight:latest
    restart: always
    ports:
      - "5540:5540"
    depends_on:
      - redis

volumes:
  node_modules:
